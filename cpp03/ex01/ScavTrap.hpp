
#ifndef SCAVTRAP_HPP
#define SCAVTRAP_HPP

#include "ClapTrap.hpp"

// Класс ScavTrap наследует от ClapTrap
class ScavTrap : public ClapTrap
{
    public:
        // Конструктор по умолчанию
        ScavTrap(); // CONSTRUCTOR
        
        // Конструктор копирования
        ScavTrap(const ScavTrap& src); // COPY CONSTRUCTOR
        
        // Деструктор
        virtual ~ScavTrap(); // DESTRUCTOR
        
        // Конструктор с параметром имени
        ScavTrap(std::string name); // CONSTRUCTOR WITH NAME
        
        // Перегрузка оператора присваивания
        ScavTrap& operator=(const ScavTrap& rhs); // OVERLOAD
        
        // CANONICAL FORM
        void guardGate(); // Метод, который переводит ScavTrap в режим охраны
};



#endif
/*Конструктор по умолчанию (ScavTrap()):

Этот конструктор будет использоваться для создания объектов класса ScavTrap без передачи параметров. Он может вызвать конструктор базового класса ClapTrap, чтобы инициализировать общие параметры, такие как здоровье, энергия и урон.
Конструктор копирования (ScavTrap(const ScavTrap& src)):

Этот конструктор создаёт новый объект как копию уже существующего объекта. В нем вызывается перегрузка оператора присваивания для копирования значений всех атрибутов из другого объекта.
Деструктор (virtual ~ScavTrap()):

Деструктор будет вызываться при удалении объекта ScavTrap. Поскольку класс ScavTrap является производным, деструктор должен быть виртуальным, чтобы корректно удалять объекты через указатель на базовый класс ClapTrap.
Конструктор с параметром имени (ScavTrap(std::string name)):

Этот конструктор позволяет передать имя объекту при его создании. Он вызывает конструктор базового класса ClapTrap, чтобы инициализировать имя, и устанавливает специфичные для ScavTrap параметры, такие как урон, очки здоровья и энергии.
Перегрузка оператора присваивания (ScavTrap& operator=(const ScavTrap& rhs)):

Этот оператор позволяет присваивать один объект ScavTrap другому. Он проверяет на самоприсваивание и копирует значения всех атрибутов из правого объекта в левый.
Метод guardGate():

Этот метод специфичен для ScavTrap. Он активирует режим охраны, выводя сообщение, что объект находится в этом режиме.
Итог:
Ваш класс ScavTrap правильно расширяет класс ClapTrap, добавляя функциональность, специфичную для этой роли, такую как режим охраны и улучшенные параметры (например, урон, здоровье, очки энергии). Вы правильно реализовали каноническую форму для конструктора, конструктора копирования, оператора присваивания и деструктора.*/