
#include "ScavTrap.hpp"
// Конструктор по умолчанию для ScavTrap, создает объект без параметров
ScavTrap::ScavTrap() 
{
	std::cout << "ScavTrap constructor called" << std::endl; // Уведомление о вызове конструктора
	return ;
}

// Конструктор с параметром имени, вызывает базовый конструктор ClapTrap с именем
ScavTrap::ScavTrap(std::string name) : ClapTrap(name)
{
	std::cout << "ScavTrap constructor called" << std::endl; // Уведомление о вызове конструктора
	setAD(20);  // Устанавливаем урон на 20
	setEP(50);  // Устанавливаем очки энергии на 50
	setHP(100); // Устанавливаем здоровье на 100
	return ;
}

// Перегрузка оператора присваивания, копирует данные из другого объекта ScavTrap
ScavTrap& ScavTrap::operator=(const ScavTrap& rhs)
{
	if (this != &rhs) // Проверяем, что это не самоприсваивание
	{
		setAD(rhs.getAD());     // Копируем урон
		setEP(rhs.getEP());     // Копируем очки энергии
		setHP(rhs.getHP());     // Копируем здоровье
		setName(rhs.getName()); // Копируем имя
	}
	return (*this); // Возвращаем текущий объект
}

// Деструктор для ScavTrap, вызывается при удалении объекта
ScavTrap::~ScavTrap()
{
	std::cout << "ScavTrap destructor called" << std::endl; // Уведомление о вызове деструктора
	return ;
}

// Конструктор копирования, создает объект как копию другого объекта ScavTrap
ScavTrap::ScavTrap(const ScavTrap& src) : ClapTrap(src) // Инициализация базового класса
{
    *this = src; // Копируем уникальные данные ScavTrap
    return ;
}


// Уникальная функция ScavTrap, активирующая режим "охранника ворот"
void ScavTrap::guardGate()
{
	std::cout << "ScavTrap " << getName() << " is now in Gate keeper mode." << std::endl; // Уведомление о режиме охраны
	return ;
}

/*Конструктор по умолчанию:

Не инициализирует параметры явно, так как предполагается, что базовый конструктор ClapTrap уже инициализирует атрибуты.
Конструктор с параметром имени:

Инициализирует объект ScavTrap с базовым именем, а также устанавливает уникальные параметры для класса (AD = 20, EP = 50, HP = 100).
Конструктор копирования:

Использует оператор присваивания, чтобы избежать дублирования кода.
Перегрузка оператора присваивания:

Проверяет самоприсваивание и аккуратно копирует все атрибуты.
Деструктор:

Выводит сообщение, что полезно для отладки.
Метод guardGate:

Добавляет уникальную функциональность для ScavTrap и соответствует задаче.
Возможные улучшения:
Добавьте инициализацию членов в конструктор по умолчанию, чтобы явно задать начальные значения, если объект создаётся без имени.
При необходимости можно добавить больше сообщений об ошибках или проверок (например, при передаче некорректных значений).
Ваш код соответствует канонической форме класса и поддерживает основные принципы объектно-ориентированного программирования.







*/